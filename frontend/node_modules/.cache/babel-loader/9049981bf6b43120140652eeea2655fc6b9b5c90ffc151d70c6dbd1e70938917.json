{"ast":null,"code":"var url = require(\"url\");\nvar URL = url.URL;\nvar http = require(\"http\");\nvar https = require(\"https\");\nvar Writable = require(\"stream\").Writable;\nvar assert = require(\"assert\");\nvar debug = require(\"./debug\");\n\n// Create handlers that pass events from native requests\nvar events = [\"abort\", \"aborted\", \"connect\", \"error\", \"socket\", \"timeout\"];\nvar eventHandlers = Object.create(null);\nevents.forEach(function (event) {\n  eventHandlers[event] = function (arg1, arg2, arg3) {\n    this._redirectable.emit(event, arg1, arg2, arg3);\n  };\n});\nvar InvalidUrlError = createErrorType(\"ERR_INVALID_URL\", \"Invalid URL\", TypeError);\n// Error types with codes\nvar RedirectionError = createErrorType(\"ERR_FR_REDIRECTION_FAILURE\", \"Redirected request failed\");\nvar TooManyRedirectsError = createErrorType(\"ERR_FR_TOO_MANY_REDIRECTS\", \"Maximum number of redirects exceeded\");\nvar MaxBodyLengthExceededError = createErrorType(\"ERR_FR_MAX_BODY_LENGTH_EXCEEDED\", \"Request body larger than maxBodyLength limit\");\nvar WriteAfterEndError = createErrorType(\"ERR_STREAM_WRITE_AFTER_END\", \"write after end\");\n\n// istanbul ignore next\nvar destroy = Writable.prototype.destroy || noop;\n\n// An HTTP(S) request that can be redirected\nfunction RedirectableRequest(options, responseCallback) {\n  // Initialize the request\n  Writable.call(this);\n  this._sanitizeOptions(options);\n  this._options = options;\n  this._ended = false;\n  this._ending = false;\n  this._redirectCount = 0;\n  this._redirects = [];\n  this._requestBodyLength = 0;\n  this._requestBodyBuffers = [];\n\n  // Attach a callback if passed\n  if (responseCallback) {\n    this.on(\"response\", responseCallback);\n  }\n\n  // React to responses of native requests\n  var self = this;\n  this._onNativeResponse = function (response) {\n    self._processResponse(response);\n  };\n\n  // Perform the first request\n  this._performRequest();\n}\nRedirectableRequest.prototype = Object.create(Writable.prototype);\nRedirectableRequest.prototype.abort = function () {\n  destroyRequest(this._currentRequest);\n  this._currentRequest.abort();\n  this.emit(\"abort\");\n};\nRedirectableRequest.prototype.destroy = function (error) {\n  destroyRequest(this._currentRequest, error);\n  destroy.call(this, error);\n  return this;\n};\n\n// Writes buffered data to the current native request\nRedirectableRequest.prototype.write = function (data, encoding, callback) {\n  // Writing is not allowed if end has been called\n  if (this._ending) {\n    throw new WriteAfterEndError();\n  }\n\n  // Validate input and shift parameters if necessary\n  if (!isString(data) && !isBuffer(data)) {\n    throw new TypeError(\"data should be a string, Buffer or Uint8Array\");\n  }\n  if (isFunction(encoding)) {\n    callback = encoding;\n    encoding = null;\n  }\n\n  // Ignore empty buffers, since writing them doesn't invoke the callback\n  // https://github.com/nodejs/node/issues/22066\n  if (data.length === 0) {\n    if (callback) {\n      callback();\n    }\n    return;\n  }\n  // Only write when we don't exceed the maximum body length\n  if (this._requestBodyLength + data.length <= this._options.maxBodyLength) {\n    this._requestBodyLength += data.length;\n    this._requestBodyBuffers.push({\n      data: data,\n      encoding: encoding\n    });\n    this._currentRequest.write(data, encoding, callback);\n  }\n  // Error when we exceed the maximum body length\n  else {\n    this.emit(\"error\", new MaxBodyLengthExceededError());\n    this.abort();\n  }\n};\n\n// Ends the current native request\nRedirectableRequest.prototype.end = function (data, encoding, callback) {\n  // Shift parameters if necessary\n  if (isFunction(data)) {\n    callback = data;\n    data = encoding = null;\n  } else if (isFunction(encoding)) {\n    callback = encoding;\n    encoding = null;\n  }\n\n  // Write data if needed and end\n  if (!data) {\n    this._ended = this._ending = true;\n    this._currentRequest.end(null, null, callback);\n  } else {\n    var self = this;\n    var currentRequest = this._currentRequest;\n    this.write(data, encoding, function () {\n      self._ended = true;\n      currentRequest.end(null, null, callback);\n    });\n    this._ending = true;\n  }\n};\n\n// Sets a header value on the current native request\nRedirectableRequest.prototype.setHeader = function (name, value) {\n  this._options.headers[name] = value;\n  this._currentRequest.setHeader(name, value);\n};\n\n// Clears a header value on the current native request\nRedirectableRequest.prototype.removeHeader = function (name) {\n  delete this._options.headers[name];\n  this._currentRequest.removeHeader(name);\n};\n\n// Global timeout for all underlying requests\nRedirectableRequest.prototype.setTimeout = function (msecs, callback) {\n  var self = this;\n\n  // Destroys the socket on timeout\n  function destroyOnTimeout(socket) {\n    socket.setTimeout(msecs);\n    socket.removeListener(\"timeout\", socket.destroy);\n    socket.addListener(\"timeout\", socket.destroy);\n  }\n\n  // Sets up a timer to trigger a timeout event\n  function startTimer(socket) {\n    if (self._timeout) {\n      clearTimeout(self._timeout);\n    }\n    self._timeout = setTimeout(function () {\n      self.emit(\"timeout\");\n      clearTimer();\n    }, msecs);\n    destroyOnTimeout(socket);\n  }\n\n  // Stops a timeout from triggering\n  function clearTimer() {\n    // Clear the timeout\n    if (self._timeout) {\n      clearTimeout(self._timeout);\n      self._timeout = null;\n    }\n\n    // Clean up all attached listeners\n    self.removeListener(\"abort\", clearTimer);\n    self.removeListener(\"error\", clearTimer);\n    self.removeListener(\"response\", clearTimer);\n    self.removeListener(\"close\", clearTimer);\n    if (callback) {\n      self.removeListener(\"timeout\", callback);\n    }\n    if (!self.socket) {\n      self._currentRequest.removeListener(\"socket\", startTimer);\n    }\n  }\n\n  // Attach callback if passed\n  if (callback) {\n    this.on(\"timeout\", callback);\n  }\n\n  // Start the timer if or when the socket is opened\n  if (this.socket) {\n    startTimer(this.socket);\n  } else {\n    this._currentRequest.once(\"socket\", startTimer);\n  }\n\n  // Clean up on events\n  this.on(\"socket\", destroyOnTimeout);\n  this.on(\"abort\", clearTimer);\n  this.on(\"error\", clearTimer);\n  this.on(\"response\", clearTimer);\n  this.on(\"close\", clearTimer);\n  return this;\n};\n\n// Proxy all other public ClientRequest methods\n[\"flushHeaders\", \"getHeader\", \"setNoDelay\", \"setSocketKeepAlive\"].forEach(function (method) {\n  RedirectableRequest.prototype[method] = function (a, b) {\n    return this._currentRequest[method](a, b);\n  };\n});\n\n// Proxy all public ClientRequest properties\n[\"aborted\", \"connection\", \"socket\"].forEach(function (property) {\n  Object.defineProperty(RedirectableRequest.prototype, property, {\n    get: function () {\n      return this._currentRequest[property];\n    }\n  });\n});\nRedirectableRequest.prototype._sanitizeOptions = function (options) {\n  // Ensure headers are always present\n  if (!options.headers) {\n    options.headers = {};\n  }\n\n  // Since http.request treats host as an alias of hostname,\n  // but the url module interprets host as hostname plus port,\n  // eliminate the host property to avoid confusion.\n  if (options.host) {\n    // Use hostname if set, because it has precedence\n    if (!options.hostname) {\n      options.hostname = options.host;\n    }\n    delete options.host;\n  }\n\n  // Complete the URL object when necessary\n  if (!options.pathname && options.path) {\n    var searchPos = options.path.indexOf(\"?\");\n    if (searchPos < 0) {\n      options.pathname = options.path;\n    } else {\n      options.pathname = options.path.substring(0, searchPos);\n      options.search = options.path.substring(searchPos);\n    }\n  }\n};\n\n// Executes the next native request (initial or redirect)\nRedirectableRequest.prototype._performRequest = function () {\n  // Load the native protocol\n  var protocol = this._options.protocol;\n  var nativeProtocol = this._options.nativeProtocols[protocol];\n  if (!nativeProtocol) {\n    this.emit(\"error\", new TypeError(\"Unsupported protocol \" + protocol));\n    return;\n  }\n\n  // If specified, use the agent corresponding to the protocol\n  // (HTTP and HTTPS use different types of agents)\n  if (this._options.agents) {\n    var scheme = protocol.slice(0, -1);\n    this._options.agent = this._options.agents[scheme];\n  }\n\n  // Create the native request and set up its event handlers\n  var request = this._currentRequest = nativeProtocol.request(this._options, this._onNativeResponse);\n  request._redirectable = this;\n  for (var event of events) {\n    request.on(event, eventHandlers[event]);\n  }\n\n  // RFC7230§5.3.1: When making a request directly to an origin server, […]\n  // a client MUST send only the absolute path […] as the request-target.\n  this._currentUrl = /^\\//.test(this._options.path) ? url.format(this._options) :\n  // When making a request to a proxy, […]\n  // a client MUST send the target URI in absolute-form […].\n  this._options.path;\n\n  // End a redirected request\n  // (The first request must be ended explicitly with RedirectableRequest#end)\n  if (this._isRedirect) {\n    // Write the request entity and end\n    var i = 0;\n    var self = this;\n    var buffers = this._requestBodyBuffers;\n    (function writeNext(error) {\n      // Only write if this request has not been redirected yet\n      /* istanbul ignore else */\n      if (request === self._currentRequest) {\n        // Report any write errors\n        /* istanbul ignore if */\n        if (error) {\n          self.emit(\"error\", error);\n        }\n        // Write the next buffer if there are still left\n        else if (i < buffers.length) {\n          var buffer = buffers[i++];\n          /* istanbul ignore else */\n          if (!request.finished) {\n            request.write(buffer.data, buffer.encoding, writeNext);\n          }\n        }\n        // End the request if `end` has been called on us\n        else if (self._ended) {\n          request.end();\n        }\n      }\n    })();\n  }\n};\n\n// Processes a response from the current native request\nRedirectableRequest.prototype._processResponse = function (response) {\n  // Store the redirected response\n  var statusCode = response.statusCode;\n  if (this._options.trackRedirects) {\n    this._redirects.push({\n      url: this._currentUrl,\n      headers: response.headers,\n      statusCode: statusCode\n    });\n  }\n\n  // RFC7231§6.4: The 3xx (Redirection) class of status code indicates\n  // that further action needs to be taken by the user agent in order to\n  // fulfill the request. If a Location header field is provided,\n  // the user agent MAY automatically redirect its request to the URI\n  // referenced by the Location field value,\n  // even if the specific status code is not understood.\n\n  // If the response is not a redirect; return it as-is\n  var location = response.headers.location;\n  if (!location || this._options.followRedirects === false || statusCode < 300 || statusCode >= 400) {\n    response.responseUrl = this._currentUrl;\n    response.redirects = this._redirects;\n    this.emit(\"response\", response);\n\n    // Clean up\n    this._requestBodyBuffers = [];\n    return;\n  }\n\n  // The response is a redirect, so abort the current request\n  destroyRequest(this._currentRequest);\n  // Discard the remainder of the response to avoid waiting for data\n  response.destroy();\n\n  // RFC7231§6.4: A client SHOULD detect and intervene\n  // in cyclical redirections (i.e., \"infinite\" redirection loops).\n  if (++this._redirectCount > this._options.maxRedirects) {\n    this.emit(\"error\", new TooManyRedirectsError());\n    return;\n  }\n\n  // Store the request headers if applicable\n  var requestHeaders;\n  var beforeRedirect = this._options.beforeRedirect;\n  if (beforeRedirect) {\n    requestHeaders = Object.assign({\n      // The Host header was set by nativeProtocol.request\n      Host: response.req.getHeader(\"host\")\n    }, this._options.headers);\n  }\n\n  // RFC7231§6.4: Automatic redirection needs to done with\n  // care for methods not known to be safe, […]\n  // RFC7231§6.4.2–3: For historical reasons, a user agent MAY change\n  // the request method from POST to GET for the subsequent request.\n  var method = this._options.method;\n  if ((statusCode === 301 || statusCode === 302) && this._options.method === \"POST\" ||\n  // RFC7231§6.4.4: The 303 (See Other) status code indicates that\n  // the server is redirecting the user agent to a different resource […]\n  // A user agent can perform a retrieval request targeting that URI\n  // (a GET or HEAD request if using HTTP) […]\n  statusCode === 303 && !/^(?:GET|HEAD)$/.test(this._options.method)) {\n    this._options.method = \"GET\";\n    // Drop a possible entity and headers related to it\n    this._requestBodyBuffers = [];\n    removeMatchingHeaders(/^content-/i, this._options.headers);\n  }\n\n  // Drop the Host header, as the redirect might lead to a different host\n  var currentHostHeader = removeMatchingHeaders(/^host$/i, this._options.headers);\n\n  // If the redirect is relative, carry over the host of the last request\n  var currentUrlParts = url.parse(this._currentUrl);\n  var currentHost = currentHostHeader || currentUrlParts.host;\n  var currentUrl = /^\\w+:/.test(location) ? this._currentUrl : url.format(Object.assign(currentUrlParts, {\n    host: currentHost\n  }));\n\n  // Determine the URL of the redirection\n  var redirectUrl;\n  try {\n    redirectUrl = url.resolve(currentUrl, location);\n  } catch (cause) {\n    this.emit(\"error\", new RedirectionError({\n      cause: cause\n    }));\n    return;\n  }\n\n  // Create the redirected request\n  debug(\"redirecting to\", redirectUrl);\n  this._isRedirect = true;\n  var redirectUrlParts = url.parse(redirectUrl);\n  Object.assign(this._options, redirectUrlParts);\n\n  // Drop confidential headers when redirecting to a less secure protocol\n  // or to a different domain that is not a superdomain\n  if (redirectUrlParts.protocol !== currentUrlParts.protocol && redirectUrlParts.protocol !== \"https:\" || redirectUrlParts.host !== currentHost && !isSubdomain(redirectUrlParts.host, currentHost)) {\n    removeMatchingHeaders(/^(?:authorization|cookie)$/i, this._options.headers);\n  }\n\n  // Evaluate the beforeRedirect callback\n  if (isFunction(beforeRedirect)) {\n    var responseDetails = {\n      headers: response.headers,\n      statusCode: statusCode\n    };\n    var requestDetails = {\n      url: currentUrl,\n      method: method,\n      headers: requestHeaders\n    };\n    try {\n      beforeRedirect(this._options, responseDetails, requestDetails);\n    } catch (err) {\n      this.emit(\"error\", err);\n      return;\n    }\n    this._sanitizeOptions(this._options);\n  }\n\n  // Perform the redirected request\n  try {\n    this._performRequest();\n  } catch (cause) {\n    this.emit(\"error\", new RedirectionError({\n      cause: cause\n    }));\n  }\n};\n\n// Wraps the key/value object of protocols with redirect functionality\nfunction wrap(protocols) {\n  // Default settings\n  var exports = {\n    maxRedirects: 21,\n    maxBodyLength: 10 * 1024 * 1024\n  };\n\n  // Wrap each protocol\n  var nativeProtocols = {};\n  Object.keys(protocols).forEach(function (scheme) {\n    var protocol = scheme + \":\";\n    var nativeProtocol = nativeProtocols[protocol] = protocols[scheme];\n    var wrappedProtocol = exports[scheme] = Object.create(nativeProtocol);\n\n    // Executes a request, following redirects\n    function request(input, options, callback) {\n      // Parse parameters\n      if (isString(input)) {\n        var parsed;\n        try {\n          parsed = urlToOptions(new URL(input));\n        } catch (err) {\n          /* istanbul ignore next */\n          parsed = url.parse(input);\n        }\n        if (!isString(parsed.protocol)) {\n          throw new InvalidUrlError({\n            input\n          });\n        }\n        input = parsed;\n      } else if (URL && input instanceof URL) {\n        input = urlToOptions(input);\n      } else {\n        callback = options;\n        options = input;\n        input = {\n          protocol: protocol\n        };\n      }\n      if (isFunction(options)) {\n        callback = options;\n        options = null;\n      }\n\n      // Set defaults\n      options = Object.assign({\n        maxRedirects: exports.maxRedirects,\n        maxBodyLength: exports.maxBodyLength\n      }, input, options);\n      options.nativeProtocols = nativeProtocols;\n      if (!isString(options.host) && !isString(options.hostname)) {\n        options.hostname = \"::1\";\n      }\n      assert.equal(options.protocol, protocol, \"protocol mismatch\");\n      debug(\"options\", options);\n      return new RedirectableRequest(options, callback);\n    }\n\n    // Executes a GET request, following redirects\n    function get(input, options, callback) {\n      var wrappedRequest = wrappedProtocol.request(input, options, callback);\n      wrappedRequest.end();\n      return wrappedRequest;\n    }\n\n    // Expose the properties on the wrapped protocol\n    Object.defineProperties(wrappedProtocol, {\n      request: {\n        value: request,\n        configurable: true,\n        enumerable: true,\n        writable: true\n      },\n      get: {\n        value: get,\n        configurable: true,\n        enumerable: true,\n        writable: true\n      }\n    });\n  });\n  return exports;\n}\n\n/* istanbul ignore next */\nfunction noop() {/* empty */}\n\n// from https://github.com/nodejs/node/blob/master/lib/internal/url.js\nfunction urlToOptions(urlObject) {\n  var options = {\n    protocol: urlObject.protocol,\n    hostname: urlObject.hostname.startsWith(\"[\") ? /* istanbul ignore next */\n    urlObject.hostname.slice(1, -1) : urlObject.hostname,\n    hash: urlObject.hash,\n    search: urlObject.search,\n    pathname: urlObject.pathname,\n    path: urlObject.pathname + urlObject.search,\n    href: urlObject.href\n  };\n  if (urlObject.port !== \"\") {\n    options.port = Number(urlObject.port);\n  }\n  return options;\n}\nfunction removeMatchingHeaders(regex, headers) {\n  var lastValue;\n  for (var header in headers) {\n    if (regex.test(header)) {\n      lastValue = headers[header];\n      delete headers[header];\n    }\n  }\n  return lastValue === null || typeof lastValue === \"undefined\" ? undefined : String(lastValue).trim();\n}\nfunction createErrorType(code, message, baseClass) {\n  // Create constructor\n  function CustomError(properties) {\n    Error.captureStackTrace(this, this.constructor);\n    Object.assign(this, properties || {});\n    this.code = code;\n    this.message = this.cause ? message + \": \" + this.cause.message : message;\n  }\n\n  // Attach constructor and set default properties\n  CustomError.prototype = new (baseClass || Error)();\n  CustomError.prototype.constructor = CustomError;\n  CustomError.prototype.name = \"Error [\" + code + \"]\";\n  return CustomError;\n}\nfunction destroyRequest(request, error) {\n  for (var event of events) {\n    request.removeListener(event, eventHandlers[event]);\n  }\n  request.on(\"error\", noop);\n  request.destroy(error);\n}\nfunction isSubdomain(subdomain, domain) {\n  assert(isString(subdomain) && isString(domain));\n  var dot = subdomain.length - domain.length - 1;\n  return dot > 0 && subdomain[dot] === \".\" && subdomain.endsWith(domain);\n}\nfunction isString(value) {\n  return typeof value === \"string\" || value instanceof String;\n}\nfunction isFunction(value) {\n  return typeof value === \"function\";\n}\nfunction isBuffer(value) {\n  return typeof value === \"object\" && \"length\" in value;\n}\n\n// Exports\nmodule.exports = wrap({\n  http: http,\n  https: https\n});\nmodule.exports.wrap = wrap;","map":{"version":3,"names":["url","require","URL","http","https","Writable","assert","debug","events","eventHandlers","Object","create","forEach","event","arg1","arg2","arg3","_redirectable","emit","InvalidUrlError","createErrorType","TypeError","RedirectionError","TooManyRedirectsError","MaxBodyLengthExceededError","WriteAfterEndError","destroy","prototype","noop","RedirectableRequest","options","responseCallback","call","_sanitizeOptions","_options","_ended","_ending","_redirectCount","_redirects","_requestBodyLength","_requestBodyBuffers","on","self","_onNativeResponse","response","_processResponse","_performRequest","abort","destroyRequest","_currentRequest","error","write","data","encoding","callback","isString","isBuffer","isFunction","length","maxBodyLength","push","end","currentRequest","setHeader","name","value","headers","removeHeader","setTimeout","msecs","destroyOnTimeout","socket","removeListener","addListener","startTimer","_timeout","clearTimeout","clearTimer","once","method","a","b","property","defineProperty","get","host","hostname","pathname","path","searchPos","indexOf","substring","search","protocol","nativeProtocol","nativeProtocols","agents","scheme","slice","agent","request","_currentUrl","test","format","_isRedirect","i","buffers","writeNext","buffer","finished","statusCode","trackRedirects","location","followRedirects","responseUrl","redirects","maxRedirects","requestHeaders","beforeRedirect","assign","Host","req","getHeader","removeMatchingHeaders","currentHostHeader","currentUrlParts","parse","currentHost","currentUrl","redirectUrl","resolve","cause","redirectUrlParts","isSubdomain","responseDetails","requestDetails","err","wrap","protocols","exports","keys","wrappedProtocol","input","parsed","urlToOptions","equal","wrappedRequest","defineProperties","configurable","enumerable","writable","urlObject","startsWith","hash","href","port","Number","regex","lastValue","header","undefined","String","trim","code","message","baseClass","CustomError","properties","Error","captureStackTrace","constructor","subdomain","domain","dot","endsWith","module"],"sources":["/Users/school/Coding Projects/VSCode Projects/youtube-taste-similarity/frontend/node_modules/follow-redirects/index.js"],"sourcesContent":["var url = require(\"url\");\nvar URL = url.URL;\nvar http = require(\"http\");\nvar https = require(\"https\");\nvar Writable = require(\"stream\").Writable;\nvar assert = require(\"assert\");\nvar debug = require(\"./debug\");\n\n// Create handlers that pass events from native requests\nvar events = [\"abort\", \"aborted\", \"connect\", \"error\", \"socket\", \"timeout\"];\nvar eventHandlers = Object.create(null);\nevents.forEach(function (event) {\n  eventHandlers[event] = function (arg1, arg2, arg3) {\n    this._redirectable.emit(event, arg1, arg2, arg3);\n  };\n});\n\nvar InvalidUrlError = createErrorType(\n  \"ERR_INVALID_URL\",\n  \"Invalid URL\",\n  TypeError\n);\n// Error types with codes\nvar RedirectionError = createErrorType(\n  \"ERR_FR_REDIRECTION_FAILURE\",\n  \"Redirected request failed\"\n);\nvar TooManyRedirectsError = createErrorType(\n  \"ERR_FR_TOO_MANY_REDIRECTS\",\n  \"Maximum number of redirects exceeded\"\n);\nvar MaxBodyLengthExceededError = createErrorType(\n  \"ERR_FR_MAX_BODY_LENGTH_EXCEEDED\",\n  \"Request body larger than maxBodyLength limit\"\n);\nvar WriteAfterEndError = createErrorType(\n  \"ERR_STREAM_WRITE_AFTER_END\",\n  \"write after end\"\n);\n\n// istanbul ignore next\nvar destroy = Writable.prototype.destroy || noop;\n\n// An HTTP(S) request that can be redirected\nfunction RedirectableRequest(options, responseCallback) {\n  // Initialize the request\n  Writable.call(this);\n  this._sanitizeOptions(options);\n  this._options = options;\n  this._ended = false;\n  this._ending = false;\n  this._redirectCount = 0;\n  this._redirects = [];\n  this._requestBodyLength = 0;\n  this._requestBodyBuffers = [];\n\n  // Attach a callback if passed\n  if (responseCallback) {\n    this.on(\"response\", responseCallback);\n  }\n\n  // React to responses of native requests\n  var self = this;\n  this._onNativeResponse = function (response) {\n    self._processResponse(response);\n  };\n\n  // Perform the first request\n  this._performRequest();\n}\nRedirectableRequest.prototype = Object.create(Writable.prototype);\n\nRedirectableRequest.prototype.abort = function () {\n  destroyRequest(this._currentRequest);\n  this._currentRequest.abort();\n  this.emit(\"abort\");\n};\n\nRedirectableRequest.prototype.destroy = function (error) {\n  destroyRequest(this._currentRequest, error);\n  destroy.call(this, error);\n  return this;\n};\n\n// Writes buffered data to the current native request\nRedirectableRequest.prototype.write = function (data, encoding, callback) {\n  // Writing is not allowed if end has been called\n  if (this._ending) {\n    throw new WriteAfterEndError();\n  }\n\n  // Validate input and shift parameters if necessary\n  if (!isString(data) && !isBuffer(data)) {\n    throw new TypeError(\"data should be a string, Buffer or Uint8Array\");\n  }\n  if (isFunction(encoding)) {\n    callback = encoding;\n    encoding = null;\n  }\n\n  // Ignore empty buffers, since writing them doesn't invoke the callback\n  // https://github.com/nodejs/node/issues/22066\n  if (data.length === 0) {\n    if (callback) {\n      callback();\n    }\n    return;\n  }\n  // Only write when we don't exceed the maximum body length\n  if (this._requestBodyLength + data.length <= this._options.maxBodyLength) {\n    this._requestBodyLength += data.length;\n    this._requestBodyBuffers.push({ data: data, encoding: encoding });\n    this._currentRequest.write(data, encoding, callback);\n  }\n  // Error when we exceed the maximum body length\n  else {\n    this.emit(\"error\", new MaxBodyLengthExceededError());\n    this.abort();\n  }\n};\n\n// Ends the current native request\nRedirectableRequest.prototype.end = function (data, encoding, callback) {\n  // Shift parameters if necessary\n  if (isFunction(data)) {\n    callback = data;\n    data = encoding = null;\n  }\n  else if (isFunction(encoding)) {\n    callback = encoding;\n    encoding = null;\n  }\n\n  // Write data if needed and end\n  if (!data) {\n    this._ended = this._ending = true;\n    this._currentRequest.end(null, null, callback);\n  }\n  else {\n    var self = this;\n    var currentRequest = this._currentRequest;\n    this.write(data, encoding, function () {\n      self._ended = true;\n      currentRequest.end(null, null, callback);\n    });\n    this._ending = true;\n  }\n};\n\n// Sets a header value on the current native request\nRedirectableRequest.prototype.setHeader = function (name, value) {\n  this._options.headers[name] = value;\n  this._currentRequest.setHeader(name, value);\n};\n\n// Clears a header value on the current native request\nRedirectableRequest.prototype.removeHeader = function (name) {\n  delete this._options.headers[name];\n  this._currentRequest.removeHeader(name);\n};\n\n// Global timeout for all underlying requests\nRedirectableRequest.prototype.setTimeout = function (msecs, callback) {\n  var self = this;\n\n  // Destroys the socket on timeout\n  function destroyOnTimeout(socket) {\n    socket.setTimeout(msecs);\n    socket.removeListener(\"timeout\", socket.destroy);\n    socket.addListener(\"timeout\", socket.destroy);\n  }\n\n  // Sets up a timer to trigger a timeout event\n  function startTimer(socket) {\n    if (self._timeout) {\n      clearTimeout(self._timeout);\n    }\n    self._timeout = setTimeout(function () {\n      self.emit(\"timeout\");\n      clearTimer();\n    }, msecs);\n    destroyOnTimeout(socket);\n  }\n\n  // Stops a timeout from triggering\n  function clearTimer() {\n    // Clear the timeout\n    if (self._timeout) {\n      clearTimeout(self._timeout);\n      self._timeout = null;\n    }\n\n    // Clean up all attached listeners\n    self.removeListener(\"abort\", clearTimer);\n    self.removeListener(\"error\", clearTimer);\n    self.removeListener(\"response\", clearTimer);\n    self.removeListener(\"close\", clearTimer);\n    if (callback) {\n      self.removeListener(\"timeout\", callback);\n    }\n    if (!self.socket) {\n      self._currentRequest.removeListener(\"socket\", startTimer);\n    }\n  }\n\n  // Attach callback if passed\n  if (callback) {\n    this.on(\"timeout\", callback);\n  }\n\n  // Start the timer if or when the socket is opened\n  if (this.socket) {\n    startTimer(this.socket);\n  }\n  else {\n    this._currentRequest.once(\"socket\", startTimer);\n  }\n\n  // Clean up on events\n  this.on(\"socket\", destroyOnTimeout);\n  this.on(\"abort\", clearTimer);\n  this.on(\"error\", clearTimer);\n  this.on(\"response\", clearTimer);\n  this.on(\"close\", clearTimer);\n\n  return this;\n};\n\n// Proxy all other public ClientRequest methods\n[\n  \"flushHeaders\", \"getHeader\",\n  \"setNoDelay\", \"setSocketKeepAlive\",\n].forEach(function (method) {\n  RedirectableRequest.prototype[method] = function (a, b) {\n    return this._currentRequest[method](a, b);\n  };\n});\n\n// Proxy all public ClientRequest properties\n[\"aborted\", \"connection\", \"socket\"].forEach(function (property) {\n  Object.defineProperty(RedirectableRequest.prototype, property, {\n    get: function () { return this._currentRequest[property]; },\n  });\n});\n\nRedirectableRequest.prototype._sanitizeOptions = function (options) {\n  // Ensure headers are always present\n  if (!options.headers) {\n    options.headers = {};\n  }\n\n  // Since http.request treats host as an alias of hostname,\n  // but the url module interprets host as hostname plus port,\n  // eliminate the host property to avoid confusion.\n  if (options.host) {\n    // Use hostname if set, because it has precedence\n    if (!options.hostname) {\n      options.hostname = options.host;\n    }\n    delete options.host;\n  }\n\n  // Complete the URL object when necessary\n  if (!options.pathname && options.path) {\n    var searchPos = options.path.indexOf(\"?\");\n    if (searchPos < 0) {\n      options.pathname = options.path;\n    }\n    else {\n      options.pathname = options.path.substring(0, searchPos);\n      options.search = options.path.substring(searchPos);\n    }\n  }\n};\n\n\n// Executes the next native request (initial or redirect)\nRedirectableRequest.prototype._performRequest = function () {\n  // Load the native protocol\n  var protocol = this._options.protocol;\n  var nativeProtocol = this._options.nativeProtocols[protocol];\n  if (!nativeProtocol) {\n    this.emit(\"error\", new TypeError(\"Unsupported protocol \" + protocol));\n    return;\n  }\n\n  // If specified, use the agent corresponding to the protocol\n  // (HTTP and HTTPS use different types of agents)\n  if (this._options.agents) {\n    var scheme = protocol.slice(0, -1);\n    this._options.agent = this._options.agents[scheme];\n  }\n\n  // Create the native request and set up its event handlers\n  var request = this._currentRequest =\n        nativeProtocol.request(this._options, this._onNativeResponse);\n  request._redirectable = this;\n  for (var event of events) {\n    request.on(event, eventHandlers[event]);\n  }\n\n  // RFC7230§5.3.1: When making a request directly to an origin server, […]\n  // a client MUST send only the absolute path […] as the request-target.\n  this._currentUrl = /^\\//.test(this._options.path) ?\n    url.format(this._options) :\n    // When making a request to a proxy, […]\n    // a client MUST send the target URI in absolute-form […].\n    this._options.path;\n\n  // End a redirected request\n  // (The first request must be ended explicitly with RedirectableRequest#end)\n  if (this._isRedirect) {\n    // Write the request entity and end\n    var i = 0;\n    var self = this;\n    var buffers = this._requestBodyBuffers;\n    (function writeNext(error) {\n      // Only write if this request has not been redirected yet\n      /* istanbul ignore else */\n      if (request === self._currentRequest) {\n        // Report any write errors\n        /* istanbul ignore if */\n        if (error) {\n          self.emit(\"error\", error);\n        }\n        // Write the next buffer if there are still left\n        else if (i < buffers.length) {\n          var buffer = buffers[i++];\n          /* istanbul ignore else */\n          if (!request.finished) {\n            request.write(buffer.data, buffer.encoding, writeNext);\n          }\n        }\n        // End the request if `end` has been called on us\n        else if (self._ended) {\n          request.end();\n        }\n      }\n    }());\n  }\n};\n\n// Processes a response from the current native request\nRedirectableRequest.prototype._processResponse = function (response) {\n  // Store the redirected response\n  var statusCode = response.statusCode;\n  if (this._options.trackRedirects) {\n    this._redirects.push({\n      url: this._currentUrl,\n      headers: response.headers,\n      statusCode: statusCode,\n    });\n  }\n\n  // RFC7231§6.4: The 3xx (Redirection) class of status code indicates\n  // that further action needs to be taken by the user agent in order to\n  // fulfill the request. If a Location header field is provided,\n  // the user agent MAY automatically redirect its request to the URI\n  // referenced by the Location field value,\n  // even if the specific status code is not understood.\n\n  // If the response is not a redirect; return it as-is\n  var location = response.headers.location;\n  if (!location || this._options.followRedirects === false ||\n      statusCode < 300 || statusCode >= 400) {\n    response.responseUrl = this._currentUrl;\n    response.redirects = this._redirects;\n    this.emit(\"response\", response);\n\n    // Clean up\n    this._requestBodyBuffers = [];\n    return;\n  }\n\n  // The response is a redirect, so abort the current request\n  destroyRequest(this._currentRequest);\n  // Discard the remainder of the response to avoid waiting for data\n  response.destroy();\n\n  // RFC7231§6.4: A client SHOULD detect and intervene\n  // in cyclical redirections (i.e., \"infinite\" redirection loops).\n  if (++this._redirectCount > this._options.maxRedirects) {\n    this.emit(\"error\", new TooManyRedirectsError());\n    return;\n  }\n\n  // Store the request headers if applicable\n  var requestHeaders;\n  var beforeRedirect = this._options.beforeRedirect;\n  if (beforeRedirect) {\n    requestHeaders = Object.assign({\n      // The Host header was set by nativeProtocol.request\n      Host: response.req.getHeader(\"host\"),\n    }, this._options.headers);\n  }\n\n  // RFC7231§6.4: Automatic redirection needs to done with\n  // care for methods not known to be safe, […]\n  // RFC7231§6.4.2–3: For historical reasons, a user agent MAY change\n  // the request method from POST to GET for the subsequent request.\n  var method = this._options.method;\n  if ((statusCode === 301 || statusCode === 302) && this._options.method === \"POST\" ||\n      // RFC7231§6.4.4: The 303 (See Other) status code indicates that\n      // the server is redirecting the user agent to a different resource […]\n      // A user agent can perform a retrieval request targeting that URI\n      // (a GET or HEAD request if using HTTP) […]\n      (statusCode === 303) && !/^(?:GET|HEAD)$/.test(this._options.method)) {\n    this._options.method = \"GET\";\n    // Drop a possible entity and headers related to it\n    this._requestBodyBuffers = [];\n    removeMatchingHeaders(/^content-/i, this._options.headers);\n  }\n\n  // Drop the Host header, as the redirect might lead to a different host\n  var currentHostHeader = removeMatchingHeaders(/^host$/i, this._options.headers);\n\n  // If the redirect is relative, carry over the host of the last request\n  var currentUrlParts = url.parse(this._currentUrl);\n  var currentHost = currentHostHeader || currentUrlParts.host;\n  var currentUrl = /^\\w+:/.test(location) ? this._currentUrl :\n    url.format(Object.assign(currentUrlParts, { host: currentHost }));\n\n  // Determine the URL of the redirection\n  var redirectUrl;\n  try {\n    redirectUrl = url.resolve(currentUrl, location);\n  }\n  catch (cause) {\n    this.emit(\"error\", new RedirectionError({ cause: cause }));\n    return;\n  }\n\n  // Create the redirected request\n  debug(\"redirecting to\", redirectUrl);\n  this._isRedirect = true;\n  var redirectUrlParts = url.parse(redirectUrl);\n  Object.assign(this._options, redirectUrlParts);\n\n  // Drop confidential headers when redirecting to a less secure protocol\n  // or to a different domain that is not a superdomain\n  if (redirectUrlParts.protocol !== currentUrlParts.protocol &&\n     redirectUrlParts.protocol !== \"https:\" ||\n     redirectUrlParts.host !== currentHost &&\n     !isSubdomain(redirectUrlParts.host, currentHost)) {\n    removeMatchingHeaders(/^(?:authorization|cookie)$/i, this._options.headers);\n  }\n\n  // Evaluate the beforeRedirect callback\n  if (isFunction(beforeRedirect)) {\n    var responseDetails = {\n      headers: response.headers,\n      statusCode: statusCode,\n    };\n    var requestDetails = {\n      url: currentUrl,\n      method: method,\n      headers: requestHeaders,\n    };\n    try {\n      beforeRedirect(this._options, responseDetails, requestDetails);\n    }\n    catch (err) {\n      this.emit(\"error\", err);\n      return;\n    }\n    this._sanitizeOptions(this._options);\n  }\n\n  // Perform the redirected request\n  try {\n    this._performRequest();\n  }\n  catch (cause) {\n    this.emit(\"error\", new RedirectionError({ cause: cause }));\n  }\n};\n\n// Wraps the key/value object of protocols with redirect functionality\nfunction wrap(protocols) {\n  // Default settings\n  var exports = {\n    maxRedirects: 21,\n    maxBodyLength: 10 * 1024 * 1024,\n  };\n\n  // Wrap each protocol\n  var nativeProtocols = {};\n  Object.keys(protocols).forEach(function (scheme) {\n    var protocol = scheme + \":\";\n    var nativeProtocol = nativeProtocols[protocol] = protocols[scheme];\n    var wrappedProtocol = exports[scheme] = Object.create(nativeProtocol);\n\n    // Executes a request, following redirects\n    function request(input, options, callback) {\n      // Parse parameters\n      if (isString(input)) {\n        var parsed;\n        try {\n          parsed = urlToOptions(new URL(input));\n        }\n        catch (err) {\n          /* istanbul ignore next */\n          parsed = url.parse(input);\n        }\n        if (!isString(parsed.protocol)) {\n          throw new InvalidUrlError({ input });\n        }\n        input = parsed;\n      }\n      else if (URL && (input instanceof URL)) {\n        input = urlToOptions(input);\n      }\n      else {\n        callback = options;\n        options = input;\n        input = { protocol: protocol };\n      }\n      if (isFunction(options)) {\n        callback = options;\n        options = null;\n      }\n\n      // Set defaults\n      options = Object.assign({\n        maxRedirects: exports.maxRedirects,\n        maxBodyLength: exports.maxBodyLength,\n      }, input, options);\n      options.nativeProtocols = nativeProtocols;\n      if (!isString(options.host) && !isString(options.hostname)) {\n        options.hostname = \"::1\";\n      }\n\n      assert.equal(options.protocol, protocol, \"protocol mismatch\");\n      debug(\"options\", options);\n      return new RedirectableRequest(options, callback);\n    }\n\n    // Executes a GET request, following redirects\n    function get(input, options, callback) {\n      var wrappedRequest = wrappedProtocol.request(input, options, callback);\n      wrappedRequest.end();\n      return wrappedRequest;\n    }\n\n    // Expose the properties on the wrapped protocol\n    Object.defineProperties(wrappedProtocol, {\n      request: { value: request, configurable: true, enumerable: true, writable: true },\n      get: { value: get, configurable: true, enumerable: true, writable: true },\n    });\n  });\n  return exports;\n}\n\n/* istanbul ignore next */\nfunction noop() { /* empty */ }\n\n// from https://github.com/nodejs/node/blob/master/lib/internal/url.js\nfunction urlToOptions(urlObject) {\n  var options = {\n    protocol: urlObject.protocol,\n    hostname: urlObject.hostname.startsWith(\"[\") ?\n      /* istanbul ignore next */\n      urlObject.hostname.slice(1, -1) :\n      urlObject.hostname,\n    hash: urlObject.hash,\n    search: urlObject.search,\n    pathname: urlObject.pathname,\n    path: urlObject.pathname + urlObject.search,\n    href: urlObject.href,\n  };\n  if (urlObject.port !== \"\") {\n    options.port = Number(urlObject.port);\n  }\n  return options;\n}\n\nfunction removeMatchingHeaders(regex, headers) {\n  var lastValue;\n  for (var header in headers) {\n    if (regex.test(header)) {\n      lastValue = headers[header];\n      delete headers[header];\n    }\n  }\n  return (lastValue === null || typeof lastValue === \"undefined\") ?\n    undefined : String(lastValue).trim();\n}\n\nfunction createErrorType(code, message, baseClass) {\n  // Create constructor\n  function CustomError(properties) {\n    Error.captureStackTrace(this, this.constructor);\n    Object.assign(this, properties || {});\n    this.code = code;\n    this.message = this.cause ? message + \": \" + this.cause.message : message;\n  }\n\n  // Attach constructor and set default properties\n  CustomError.prototype = new (baseClass || Error)();\n  CustomError.prototype.constructor = CustomError;\n  CustomError.prototype.name = \"Error [\" + code + \"]\";\n  return CustomError;\n}\n\nfunction destroyRequest(request, error) {\n  for (var event of events) {\n    request.removeListener(event, eventHandlers[event]);\n  }\n  request.on(\"error\", noop);\n  request.destroy(error);\n}\n\nfunction isSubdomain(subdomain, domain) {\n  assert(isString(subdomain) && isString(domain));\n  var dot = subdomain.length - domain.length - 1;\n  return dot > 0 && subdomain[dot] === \".\" && subdomain.endsWith(domain);\n}\n\nfunction isString(value) {\n  return typeof value === \"string\" || value instanceof String;\n}\n\nfunction isFunction(value) {\n  return typeof value === \"function\";\n}\n\nfunction isBuffer(value) {\n  return typeof value === \"object\" && (\"length\" in value);\n}\n\n// Exports\nmodule.exports = wrap({ http: http, https: https });\nmodule.exports.wrap = wrap;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}